// allow chains as state arguments. They are transformed like before.

id_start = { 'a'..'z' | 'A'..'Z' | "_" }
id_continue = { id_start | '0'..'9' }
id = @{ !(keyword_accept ~ !id_continue) ~
        !(keyword_reject ~ !id_continue) ~
        !(keyword_def ~ !id_continue) ~
        id_start ~ (id_continue)* }

keyword_accept = { "accept" }
keyword_reject = { "reject" }
keyword_def = { "def" }

char = @{ "'" ~ char_inner ~ "'" }
char_inner = @{ "x" ~ hexdigit ~ hexdigit | ascii_printable }
hexdigit = { '0'..'9' | 'a'..'f' }


statedef = { id ~ ("(" ~ id ~ ("," ~ id)* ~ ")")? ~ "{" ~ branch+ ~ "}" }
branch = { selector ~ call_chain }
call_chain = { (primitive | call)* ~ (keyword_accept | keyword_reject)? }
selector = { "[" ~ keyword_def ~ "]" | "[" ~ (char | id) ~ ("|" ~ (char | id))* ~ "]" }
call = { id ~ ("(" ~ (char | call_chain) ~ ("," ~ (char | call_chain))* ~ ")")? }
primitive = { ">" | "<" | "#" ~ (char | id) }

file = { SOI ~ statedef* ~ EOI }

ascii_printable = { '\u{20}'..'\u{7e}' }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

