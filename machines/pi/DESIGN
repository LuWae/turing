The calculation of pi is based on the Leibniz formula:
pi = 4 (1 - 1/3 + 1/5 - 1/7 + ...).
It converges very slowly, but is pretty easy to understand and implement. The machine never terminates.

We want to calculate infinitely many decimal places of infinitely many rational numbers.
To do that, we use a 2D->1D mapping. In the first iteration, we calculate the first decimal place of 1/3. In the second iteration, we calculate the first decimal place of 1/5 and the second decimal place of 1/3. And so on to infinity.

steps table (#step:digit)
 number 1/3 1/5 1/7 1/9 ...
d.place
(2^-k)
 1      1:0 2:0 3:0 4:0
 2      2:1 3:0 4:0
 3      3:0 4:1
 4      4:1
...

Calculating the digits of the rationals is done by shifting and subtracting, just like dividing on paper.
The machine keeps track to which digit of pi it needs to add or subtract the calculated digit by either writing 'a' (add to 0), 'b' (add to 1), 'A' (sub from 0), 'B' (sub from 1) at the correct position. The next rational to be used is marked by '%' to the left of it. Additionally, the machine keeps track if the first rational of the current step is to be added ('$p$') or subtracted ('$n$').
The digits of pi appear to the right of the rightmost '$' (tape position [1..]). As explained above, 'a', 'A' represent a marked 0; 'b', 'B' represent a marked 1.
