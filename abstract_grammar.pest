id_start = { 'a'..'z' | 'A'..'Z' | "_" }
id_continue = { id_start | '0'..'9' }
id = @{ !(keyword_let ~ !id_continue) ~ 
        !(keyword_accept ~ !id_continue) ~
        !(keyword_reject ~ !id_continue) ~
        !(keyword_return ~ !id_continue) ~
        !(keyword_stay ~ !id_continue) ~
        !(keyword_fn ~ !id_continue) ~
        !(keyword_match ~ !id_continue) ~
        !(keyword_chain ~ !id_continue) ~
        id_start ~ (id_continue)* }

keyword_let = { "let" }
keyword_accept = { "accept" }
keyword_reject = { "reject" }
keyword_return = { "return" }
keyword_fn = { "fn" }
keyword_match = { "match" }
keyword_chain = { "chain" }
keyword_stay = { "stay" }

// keyword_def is not used for now.

imm_char = @{ "'" ~ char_inner ~ "'" }
char_inner = @{ "x" ~ hexdigit ~ hexdigit | ascii_printable }
hexdigit = { '0'..'9' | 'a'..'f' }


let = { keyword_let ~ id ~ "=" ~ expr }
expr = {
  imm_selector | // safe
  imm_chain | // safe
  imm_char | // safe
  imm_primitive | // safe
  imm_funcdef | // safe
  imm_funccall | // safe
  imm_match | // safe
  id | "$" }
imm_primitive = { "<" | ">" | "#" ~ expr }
imm_selector = { "[" ~ expr ~ ("|" ~ expr)* ~ "]" }
imm_chain = { keyword_chain ~ "{" ~ expr* ~ (keyword_accept | keyword_reject | keyword_stay | keyword_return) ~ "}" }
imm_funcdef = { keyword_fn ~ "(" ~ id ~ ("," ~ id)* ~ ")" ~ expr }
imm_funccall = { "@" ~ expr ~ "(" ~ expr ~ ("," ~ expr)* ~ ")" }
imm_match = { keyword_match ~ expr ~ "{" ~ (expr ~ ":" ~ expr)+ ~ "}" }

file = { SOI ~ let* ~ EOI }

ascii_printable = { '\u{20}'..'\u{7e}' }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
